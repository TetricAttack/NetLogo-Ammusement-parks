globals [
  attendance        ;; asistencia        ; La asistencia actual al bar.
  history           ;; historia          ; lista de valores pasados de asistencia
  home-patches      ;; casa-parches      ; Agentes de parches verdes que representan la zona residencial.
  funpark-patches   ;; parches-bar       ; conjunto de agentes de parches azules que representan el área de la barra
  crowded-patch     ;; parche-concurrido ; Parche donde mostramos la etiqueta "concurrido"
  entrada-patches   ;; parche-entrada    ; Parche donde está la gente que decide ir y no puede entrar por que el parque esta lleno.
]

turtles-own [
  strategies      ;; estrategias       ; lista de estrategias
  best-strategy   ;; mejor estrategia  ; índice de la mejor estrategia actual
  attend?         ;;  ¿asistir?        ; Es cierto si el agente actualmente planea asistir a la barra
  prediction      ;;  predicción       ; predicción actual de la asistencia del bar
]

to setup
  clear-all
  set-default-shape turtles "person"
  
  
  ;; create the 'homes'
  set home-patches patches with [pycor < -5  ]
  ask home-patches [ set pcolor orange ]

  ;; create the 'bar'
  set funpark-patches patches with [pycor > 0]
  ask funpark-patches [ set pcolor blue ]
  
   ;; create the 'entrada'
  set entrada-patches patches with [pycor < 0 and pycor > -5  ]
  ask entrada-patches [ set pcolor yellow ]

   ;; Inicializar aleatoriamente la asistencia anterior para que los agentes tengan un historial.
   ;; trabajar desde el principio
  set history n-values (memory-size * 2) [random 100]
   ;; la historia es el doble de la memoria, porque necesitamos al menos un valor de memoria de la historia
   ;; para cada punto en la memoria probar qué tan bien habrían funcionado las estrategias
  set attendance first history

   ;; use una de las etiquetas de parche para indicar visualmente si
   ;; el bar esta "lleno de gente"
  ask patch (0.5 * max-pxcor) (0.5 * max-pycor) [
    set crowded-patch self
    set plabel-color red
  ]

   ;; Crea los agentes y dales estrategias al azar.
   ;; Estas son las únicas estrategias que tendrán estos agentes, aunque
   ;; Pueden cambiar cual de estas "bolsas de estrategias" usan cada tick.
  create-turtles población [ 
    set color white
    move-to-empty-one-of home-patches
    set strategies n-values number-strategies [random-strategy]
    set best-strategy first strategies
    update-strategies
  ]
  ask n-of (población / 2) turtles ;la mitad de la poblacion cambio el color a negro
  [
    set color black
  ]

   ;; iniciar el reloj
  reset-ticks
end


to go
  ;;  actualizar las variables globales
  ask crowded-patch [ set plabel "" ]
  ;; Cada agente predice la asistencia al bar y decide si ir o no.
  ask turtles [
    set prediction predict-attendance best-strategy sublist history 0 memory-size
    set attend? (prediction <= overcrowding-threshold)  ;; verdadero o falso
  ]
  ;; Dependiendo de su decisión, los agentes van al bar o se quedan en casa.
  ask turtles [
    ifelse attend?
      [ move-to-empty-one-of funpark-patches
        set attendance attendance + 1 ]
      [ move-to-empty-one-of home-patches ]
  ]

  ;; Si el bar está lleno indica que en la vista.
  set attendance count turtles-on funpark-patches
  if attendance > overcrowding-threshold [
    ask crowded-patch [ set plabel "CROWDED" ]
  ]
  ;; actualizar el historial de asistencia
  ;; eliminar la asistencia más antigua y anteponer la asistencia más reciente
  set history fput attendance but-last history
  ;; Los agentes deciden cual es la nueva mejor estrategia.
  ask turtles [ update-strategies ]
  ;; adelantar el reloj
  tick
end

;; determina qué estrategia hubiera predicho los mejores resultados si se hubiera utilizado en esta ronda.
;; La mejor estrategia es la que tiene la suma de las diferencias más pequeñas entre los
;; Asistencia actual y la asistencia prevista para cada uno de los precedentes.
;; semanas (regresando semanas de tamaño de memoria)
;; esto no cambia las estrategias en absoluto, pero sí cambia (potencialmente) la
;; Actualmente se está utilizando y actualiza el rendimiento de todas las estrategias.
to update-strategies
  ;; Inicializar el mejor puntaje a un máximo, que es el puntaje más bajo posible
  let best-score memory-size * 100 + 1
  foreach strategies [ the-strategy ->
    let score 0
    let week 1
    repeat memory-size [
      set prediction predict-attendance the-strategy sublist history week (week + memory-size)
      set score score + abs (item (week - 1) history - prediction)
      set week week + 1
    ]
    if (score <= best-score) [
      set best-score score
      set best-strategy the-strategy
    ]
  ]
end

;; Esto reporta una estrategia aleatoria. una estrategia es solo un conjunto de pesos de -1.0 a 1.0 que
;; determina cuánto énfasis se pone en cada período de tiempo anterior al hacer
;; una predicción de asistencia para el siguiente período de tiempo
to-report random-strategy
  report n-values (memory-size + 1) [1.0 - random-float 2.0]
end

;; Esto reporta la predicción de un agente de la asistencia actual.
;; Usando una estrategia particular y parte del historial de asistencia.
;; Más específicamente, la estrategia es luego descrita por la fórmula
;; p (t) = x (t - 1) * a (t - 1) + x (t - 2) * a (t -2) + ..
;; ... + x (t - TAMAÑO DE MEMORIA) * a (t - TAMAÑO DE MEMORIA) + c * 100,
;; donde p (t) es la predicción en el tiempo t, x (t) es la asistencia de la barra en el tiempo t,
;; a (t) es el peso para el tiempo t, c es una constante y MEMORY-SIZE es un parámetro externo.
to-report predict-attendance [strategy subhistory]
 ;; El primer elemento de la estrategia es la constante, c, en la fórmula de predicción.
 ;; Uno puede pensar en ello como la predicción del agente de la asistencia del bar
 ;; en ausencia de cualquier otro dato
 ;; Luego multiplicamos cada semana en la historia por su respectivo peso.
  report 100 * first strategy + sum (map [ [weight week] -> weight * week ] butfirst strategy subhistory)
end

;; En este modelo realmente no importa exactamente qué parche
;; una tortuga está encendida, solo si la tortuga está en la zona de origen
;; o la zona del bar. Sin embargo, para hacer una bonita visualización.
;; Este procedimiento se utiliza para garantizar que solo tenemos uno.
;; tortuga por parche.
to move-to-empty-one-of [locations]  ;; procedimiento de tortuga
  move-to one-of locations
  while [any? other turtles-here] [
    move-to one-of locations
  ]
end
